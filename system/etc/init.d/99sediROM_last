#!/system/bin/sh
############################################################
#
# Copyright (c) 2015 by Thomas Fischer, www.se-di.de
# All rights reserved.
# v2.3
#
# This script is part of sediROM.
############################################################

echo "$(date +%D_%T) - sediROM($0): starting" >> /dev/kmsg

# path where the config and log will be saved
SEDIDIR=/preload/.sediROM

# Indicator file will be added by shutdown script and that requires at least 1 clean shutdown.
IFLAG=$SEDIDIR/.initialized

############################################################
# ensure that /data is not encrypted and if so we wait until it will
# be unlocked by the user
ENCSTATE=$(getprop vold.post_fs_data_done)

# ensure that system has booted completely
BOOTSTATE=$(getprop sys.boot_completed)

while [ ! -f "$IFLAG" ] || [ ! "x$ENCSTATE" == "x1" ] || [ ! "x$BOOTSTATE" == "x1" ];do
    echo "$(date +%D_%T) - sediROM($0): /data (still) locked or sediROM is not fully initialized." >> /dev/kmsg
    RETIFLAG=$(test -f "$IFLAG")
    echo "$(date +%D_%T) - sediROM($0): boot state was: $BOOTSTATE (should be empty or 1)." >> /dev/kmsg
    echo "$(date +%D_%T) - sediROM($0): $IFLAG test was: $RETIFLAG (should be empty or 0)." >> /dev/kmsg
    echo "$(date +%D_%T) - sediROM($0): Encryption test was: $ENCSTATE (should be 1)." >> /dev/kmsg
    sleep 10s
    # re-check states
    ENCSTATE=$(getprop vold.post_fs_data_done)
    BOOTSTATE=$(getprop sys.boot_completed)
    # if we were not able to use preload as log storage we will use sdcard instead    
    SEDISDDIR=/sdcard/.sediROM # if we cannot mount /preload this is a fallback
    INDIMOVED=$SEDISDDIR/dir-moved-2-preload.txt # indicator file to know if we are using preload or not               
    if [ ! -f "$INDIMOVED" ];then                                                                              
        SEDIDIR=$SEDISDDIR
    fi                                                                                                         
    echo "$(date +%D_%T) - sediROM($0): initflag dir set to $SEDIDIR" >> /dev/kmsg
    IFLAG=$SEDIDIR/.initialized
done

# set working dir according to the above result
WRKDIR=$SEDIDIR/initd
LOG=$WRKDIR/${0##*/}.log
CRONLOG=${WRKDIR}/crond.log

echo "$(date +%D_%T) - sediROM: starting $0" > $LOG

# setup work dir
[ ! -d $WRKDIR ] && mkdir -p $WRKDIR


echo "$(date): Starting crond" >> $LOG

# check for config dir and if it's there startup cron
# -L doesn't work!
# using -b and piping stderr to log doesn't work either
# so we need to start it in foreground instead to be able to catch stderr
if [ -d /etc/cron.d ];then
    crond -f -d5 -c /etc/cron.d >> $CRONLOG 2>&1 &
    echo "$(date): crond started (success was not checked. it means crond should run but you need to check it by yourself).">> $LOG
else
    echo "$(date): cron dir does not exist! Not starting cron." >> $LOG
fi

##############################################################
# Remounting READ-ONLY is absolutely important >
#
# check if we need to remount
RWCNT=$(grep /system /proc/mounts |grep -c "rw[ ,]")
if [ $RWCNT -ne 0 ];then
    echo "$(date): /system is read-writable! This will be fixed now." >> $LOG
    mount -oremount,ro /system 2>&1 >> $LOG
    if [ $? -eq 0 ];then
        echo "$(date): Remounted read-only with success." >> $LOG
    else
        echo "$(date): Error while remounting read-only. I try it 1 more time.." >> $LOG
        mount -oremount,ro /system 2>&1 >> $LOG
    fi
else
    echo "/system already read-only. good." >> $LOG
fi
# < END: Remounting READ-ONLY
##############################################################

echo "$(date +%D_%T) - sediROM: $0 finished." >> $LOG
echo "$(date +%D_%T) - sediROM($0): finished." >> /dev/kmsg