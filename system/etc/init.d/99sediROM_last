#!/system/bin/sh
#############################################################################################################################
#
# Author:   Thomas Fischer (xdajog) <mail@se-di.de>
# Desc:		This code is part of sediROM (http://forum.xda-developers.com/showthread.php?t=2789727)
# Version:  v2.5 (the first digit reflects the sediROM major version when this file has been created/changed/modified)
#
# License:  This code is licensed under the Creative Commons License CC BY-SA 4.0.
#
# DISCLAIMER:
# The following deed highlights only some of the key features and terms of the actual license.
# It is NOT a license and has NO legal value. You should carefully review ALL of the terms and conditions of the actual
# license before using the licensed material.
#
# Please check the following link for details and the full legal content:
# http://creativecommons.org/licenses/by-sa/4.0/legalcode
#
#    You are free to:
#
#       Share — copy and redistribute the material in any medium or format
#       Adapt — remix, transform, and build upon the material
#
#       for any purpose, even commercially.
#       The licensor cannot revoke these freedoms as long as you follow the license terms.
#
#    Under the following terms:
#
#       Attribution:
#          You must give appropriate credit, provide a link to the license, and indicate if changes were made.
#          You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.
#
#       ShareAlike:
#          If you remix, transform, or build upon the material, you must distribute your contributions under the same
#          license as the original.
#
#############################################################################################################################

echo "$(date +%D_%T) - sediROM($0): starting" >> /dev/kmsg

# path where the config and log will be saved
SEDIDIR=/preload/.sediROM

# Indicator file will be added by shutdown script and that requires at least 1 clean shutdown.
IFLAG=$SEDIDIR/.initialized

############################################################
# ensure that /data is not encrypted and if so we wait until it will
# be unlocked by the user
ENCSTATE=$(getprop vold.post_fs_data_done)

# ensure that system has booted completely
BOOTSTATE=$(getprop sys.boot_completed)

# ensure we are fully initialized
PARTITION_WAIT "$0"

# set / check log path
ENABLE_LOG "$0"
CRONLOG=${WRKDIR}/crond.log

echo "$(date +%D_%T) - sediROM: starting $0" > $LOG

echo "$(date): Starting crond" >> $LOG

# check for config dir and if it's there startup cron
# -L doesn't work!
# using -b and piping stderr to log doesn't work either
# so we need to start it in foreground instead to be able to catch stderr
if [ -d /etc/cron.d ];then
    crond -f -d5 -c /etc/cron.d >> $CRONLOG 2>&1 &
    echo "$(date): crond started (success was not checked. it means crond should run but you need to check it by yourself).">> $LOG
else
    echo "$(date): cron dir does not exist! Not starting cron." >> $LOG
fi

# catch boot process logs
    rm -f $BOOTLOG/*.debug
    dmesg > $BOOTLOG/dmesg.debug
    mount > $BOOTLOG/mount.debug
    logcat -d -v time -b main -b system -b radio -b events *:F -f $BOOTLOG/logcat_fatal.debug
    logcat -d -v time -b main -b system -b radio -b events *:E -f $BOOTLOG/logcat_errors.debug
    logcat -d -v time -b main -b system -b radio -b events *:W -f $BOOTLOG/logcat_warnings.debug
    # outcomment the following for very verbose output:
    # logcat -d -v time -b main -b system -b radio -b events *:D -f $BOOTLOG/logcat_debug.debug

# catch the self healing logs:
    mv /cache/*.debug $BOOTLOG/

##############################################################
# Remounting READ-ONLY is absolutely important >
#
# check if we need to remount
RWCNT=$(grep /system /proc/mounts |grep -c "rw[ ,]")
if [ $RWCNT -ne 0 ];then
    echo "$(date): /system is read-writable! This will be fixed now." >> $LOG
    mount -oremount,ro /system 2>&1 >> $LOG
    if [ $? -eq 0 ];then
        echo "$(date): Remounted read-only with success." >> $LOG
    else
        echo "$(date): Error while remounting read-only. I try it 1 more time.." >> $LOG
        mount -oremount,ro /system 2>&1 >> $LOG
    fi
else
    echo "/system already read-only. good." >> $LOG
fi
# < END: Remounting READ-ONLY
##############################################################

echo "$(date +%D_%T) - sediROM: $0 finished." >> $LOG
echo "$(date +%D_%T) - sediROM($0): finished." >> /dev/kmsg