#!/system/bin/sh
############################################################
# This script is part of sediROM
#
# Copyright (c) 2014-2015 by Thomas Fischer, www.se-di.de
# v2.2
############################################################

echo "sediROM: starting $0" >> /dev/kmsg

# path where the config and log will be saved
SEDIDIR=/sdcard/.sediROM/
BTFLAG=$SEDIDIR/.initialized

############################################################
# ensure that /data is not encrypted and if so we wait until it will
# be unlocked by the user
ENCSTATE="undefined"

while [ ! -f "$BTFLAG" ] || [ ! "x$ENCSTATE" == "x1" ];do
    ENCSTATE=$(getprop vold.post_fs_data_done)
    echo "sediROM: data partition locked / not mounted yet or sediROM not initialized." >> /dev/kmsg
    echo "sediROM: Have you rebooted after flashing? encryption state = $ENCSTATE" >> /dev/kmsg
    sleep 4s
done

# checks a android service state
# needs service name as argument:
F_CHKSVC(){
        SCSTATE=$(service check $1 |grep -c "not found")
        if [ $SCSTATE -eq 0 ];then echo $1 running;else echo "$1 not running";fi
}
# checks a android process state             
# needs process name as argument:
F_CHKPROC(){
        SCSTATE=$(ps|grep -c $1)
        if [ $SCSTATE -ge 1 ];then echo $1 running;else echo "$1 not running";fi
}

#for p in $(echo brcm_patchram_plus);do
#        unset SCSTATE
#        F_CHKPROC $p
#        if [ $SCSTATE -ge 1 ];then echo $p running;else echo "$p not running";fi
#done
#for i in $(echo bluetooth); do
#        unset SCSTATE
#        F_CHKSVC $i
#        if [ $SCSTATE -eq 0 ];then echo $i running;else echo "$i not running";fi
#done



# double check that we can proceed and /data is unlocked
if [ -d "$SEDIDIR" ] && [ -d /data/misc ] ;then
    echo "sediROM: Starting BT fix cause /data is unlocked and mounted" >> /dev/kmsg

    # bluetooth loosing paired devices workaround
    # (see also /system/etc/shutdown/sediROM_btfix for the first part)
    #
    WRKDIR=$SEDIDIR/btfix
    BTNAME=00_btbackup.tar
    BTBAK=$WRKDIR/$BTNAME
    LOG=$WRKDIR/part2_boot.log
    BTFIX=/data/misc/bluetoothd/*
    BTFIX_OLD=/data/misc/bluetoothd/*/config

    echo "$(date +%D_%T): Starting BT fix part2 (onboot execution).."  > $LOG

    if [ -f $BTBAK ];then
        stop bluetoothd	# NOT bluetooth - bluetoothd!
        stop hciattach

	sleep 2s
	F_CHKPROC brcm_patchram_plus >> $LOG
	F_CHKPROC bluetooth >> $LOG
        F_CHKPROC bluetoothd >> $LOG

        chattr -i $BTFIX $BTFIX_OLD
        tar -C / -xvf $BTBAK 2>&1 >> $LOG \
        && for i in $(find /data/misc/bluetoothd);do chown bluetooth.bluetooth $i;done 2>&1 >> $LOG \
        && for s in $(find /data/misc/bluetooth);do chown system.system $s;done 2>&1 >> $LOG \
        && chattr +i $BTFIX \
        && echo "Immutables:" >> $LOG && lsattr /data/misc/bluetoothd/ >> $LOG\
        && echo "$(date +%D_%T): All restoring done sucessfully!" >> $LOG

	# this seems to be very important otherwise toggle BT on will not work:
	# and yes need to do that TWICE! Dont ask why.
	echo 1 > /sys/devices/platform/bcm4330_bluetooth/rfkill/rfkill0/state
	echo "rfkill state: $(cat /sys/devices/platform/bcm4330_bluetooth/rfkill/rfkill0/state)" >> $LOG

        start hciattach >> $LOG
        start bluetoothd >> $LOG # NOT bluetoothd! - bluetooth 

	sleep 2s
        F_CHKPROC brcm_patchram_plus >> $LOG                                                 
        F_CHKPROC bluetooth >> $LOG                                                 
        F_CHKPROC bluetoothd >> $LOG
	echo 1 > /sys/devices/platform/bcm4330_bluetooth/rfkill/rfkill0/state
	echo "rfkill state: $(cat /sys/devices/platform/bcm4330_bluetooth/rfkill/rfkill0/state)" >> $LOG
    else
        echo "$(date +%D_%T): No previous backup detected. Skipping restore.." >> $LOG
    fi

    sleep 30s && chattr -i $BTFIX >> $LOG \
	&& echo "$(date +%D_%T): config dir writable again.." >> $LOG \
	&& echo "sediROM: config dir writable again.." >> /dev/kmsg \
	&
else
    echo "sediROM: Skipping BT fix cause /data locked or not mounted. encryption state = $ENCSTATE" >> /dev/kmsg
fi
echo "sediROM: $0 finished." >> /dev/kmsg